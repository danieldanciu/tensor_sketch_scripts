# read the maf and fastq files representing simulated PACBIO reads from a given genome  generated by PBSIM
# using something like:
# ./src/pbsim --data-type CLR --depth 9 --model_qc data/model_qc_clr 1813613.fna --length-mean 80
# and extract each sequence into a separate file, sorted by the position of the first base relative to the
# genome

import re


def acgt_complement(c):
    if c == 'A':
        return 'T'
    elif c == 'C':
        return 'G'
    elif c == 'G':
        return 'C'
    elif c == 'T':
        return 'A'


def reverse_complement(s):
    result = ''
    for c in reversed(s):
        result += acgt_complement(c)
    return result


f = open('/Users/dd/work/PBSIM-PacBio-Simulator/sd_0001.maf')
flines = f.readlines()
f_seq = open('/Users/dd/work/PBSIM-PacBio-Simulator/sd_0001.fastq')
f_seq_lines = f_seq.readlines()
lines = []
lines_seq = []

pacb_reads = []
for fline, fline_seq in zip(flines, f_seq_lines):
    lines.append(fline)
    lines_seq.append(fline_seq)
    if len(lines) < 4:
        continue
    assert (lines[0] == 'a\n')
    assert (lines[1].startswith('s'))
    maf_tokens = re.split('[ \t]+', lines[1])
    assert (maf_tokens[0] == 's')
    align_start = int(maf_tokens[2])
    align_stop = align_start + int(maf_tokens[3])

    maf_tokens2 = re.split('[\t ]+', lines[2])
    if maf_tokens2[4] == '+':
        seq = lines_seq[1][:-1]
    else:
        assert (maf_tokens2[4] == '-')
        seq = reverse_complement(lines_seq[1][:-1])

    pacb_reads.append((align_start, align_stop, seq))
    # print(align_start, align_stop, len(lines_seq[1][:-1]), seq, '\n')
    lines = []
    lines_seq = []

pacb_reads.sort(key=lambda tup: tup[0])
i = 0
for start, stop, seq in pacb_reads:
    suffix = format(i, '03d')
    f = open('/tmp/seqs/s' + suffix + '.fasta', 'w')
    f.write(f'> s{suffix} {start} {stop}\n')
    f.write(seq + '\n')
    f.close()
    print(start, stop)
    i = i + 1
print(pacb_reads)
